@page "/warenkorb"
@inject IWarenKorbDienst WarenKorbDienst
@inject IBestellungDienst BestellungDienst

<PageTitle>Einkaufswagen</PageTitle>
<h3>Einkaufswagen</h3>
@if (warenKorbProdukte == null || warenKorbProdukte.Count == 0)
{
    <span>@nachricht</span>
}
else if(bestellungAufgeben)
{
    <span>
        Danke für ihre Bestellung 🚛
        Sie können ihre Bestellung  hier  <a href="bestellungen"> folgen.</a>
    </span>
}
else
{
    <div>
        @foreach (var produkt in warenKorbProdukte)
       {
           <div class="container">
               <div class="image-wrapper">
                   <img src="@produkt.BildUrl" class="img"/>
               </div>
               <div class="name">
                   <h5><a href="/produkt/@produkt.ProduktID">@produkt.Title</a></h5>
                   <span>@produkt.ProduktArt</span><br/>
                   <input type="number" value="@produkt.Menge"
                   @onchange="@((ChangeEventArgs e) => MengeAktualisieren(e, produkt))"
                   class="form-control menge-eingabe"
                   min="1"/>
                    <button class="btn btn-outline-danger" @onclick="@(()=>
                        EntfernenProduktAusWarenKorb(produkt.ProduktID,produkt.ProduktArtID))">Löschen</button>
               </div>
               <div class="warenkorb-produkt-preis">$@(produkt.Preis * produkt.Menge)</div>
           </div>
       }
        <div class="warenkorb-produkt-preis">
            Gesamtpreis (@warenKorbProdukte.Count): @warenKorbProdukte.Sum(produkt => produkt.Preis * produkt.Menge) €
        </div>
    </div>
    <button @onclick="BestellungAufgeben" class="btn alert-success float-end mt-2 m-2">Bestellung Aufgeben</button>
}
@code {
    List<AntwortDesWarenKorbProduktes> warenKorbProdukte = null;
    string nachricht = "Warenkorb wird geladen...";
    bool bestellungAufgeben = false;

    protected override async Task OnInitializedAsync()
    {
        bestellungAufgeben = false;
        await WarenKorbLaden();
    }
    private async Task EntfernenProduktAusWarenKorb(int produktID, int produktArtID)
    {
        await WarenKorbDienst.EntfernenProduktAusWarenKorbAsync(produktID, produktArtID);
        await WarenKorbLaden();

    }
    private async Task WarenKorbLaden()
    {
        await WarenKorbDienst.GeheZurWarenKorbArtikelAnzahlAsync();
        warenKorbProdukte = await WarenKorbDienst.GeheZurWarenKorbProdukteAsync();
        if (warenKorbProdukte == null || warenKorbProdukte.Count == 0)
        {
            nachricht = "Ihr Warenkorb ist leer.";
        }
    }
    private async Task MengeAktualisieren(ChangeEventArgs e, AntwortDesWarenKorbProduktes produkt)
    {
        produkt.Menge = int.Parse(e.Value.ToString());
        if (produkt.Menge < 1)
            produkt.Menge = 1;
        await WarenKorbDienst.MengeAktualisierenAsync(produkt);
    }

    private async Task BestellungAufgeben()
    {
        await BestellungDienst.BestellungAufgebenAsync();
        await WarenKorbDienst.GeheZurWarenKorbArtikelAnzahlAsync();
        bestellungAufgeben=true;
    }
}
