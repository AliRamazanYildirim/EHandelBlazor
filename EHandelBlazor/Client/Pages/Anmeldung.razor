@page "/anmeldung"
@using Blazored.FluentValidation
@using Microsoft.AspNetCore.WebUtilities;
@inject IAuthDienst AuthDienst
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Anmeldung</PageTitle>

<h3>Anmeldung</h3>

<EditForm Model="benutzer" OnValidSubmit="HandleAnmeldung">
    <FluentValidationValidator />

    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="benutzer.Email" class="form-control" />
        <ValidationMessage For="@(()=>benutzer.Email)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label for="passwort">Passwort</label>
        <InputText id="passwort" @bind-Value="benutzer.Passwort" class="form-control" type="passwort" />
        <ValidationMessage For="@(()=>benutzer.Passwort)"></ValidationMessage>

    </div>
    <button type="submit" class="btn btn-outline-success">Anmeldung</button>
</EditForm>
<div class="text-danger">
    <span>@fehlerNachricht</span>
</div>
@code {
    private BenutzerAnmeldung benutzer = new BenutzerAnmeldung();

    private string returnUrl = string.Empty;

    private string fehlerNachricht = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleAnmeldung()
    {
        var resultat = await AuthDienst.AnmeldungAsync(benutzer);
        if(resultat.Erfolg)
        {
            fehlerNachricht = string.Empty;
            await LocalStorage.SetItemAsync("authToken", resultat.Daten);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo(returnUrl);

        }
        else
        {
            fehlerNachricht = resultat.Nachricht;
        }
    }
}
