@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWarenKorbDienst WarenKorbDienst

<div class="dropdown">
    <button @onclick="UmschalteBenutzerMenu"
            @onfocusout="AusblendenBenutzerMenu"
            class="btn btn-warning dropdown-toggle benutzer-button">
        <i class="oi oi-person"></i>
    </button>
    <div class="dropdown-menu dropdown-menu-right @BenutzerMenuCssKlasse">
        <AuthorizeView>
            <Authorized>
                <a href="profil" class="dropdown-item">Profil</a>
                <a href="bestellungen" class="dropdown-item">Bestellungen</a>
                <hr/>
                <button class="dropdown-item" @onclick="Ausloggen">Ausloggen</button>
            </Authorized>
            <NotAuthorized>
                <a href="anmeldung?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)" class="dropdown-item">Anmeldung</a>
                <a href="registrierung" class="dropdown-item">Registrieren</a>
            </NotAuthorized>
        </AuthorizeView>


    </div>
</div>

@code {
    private bool zeigeBenutzerMenu = false;
    private string BenutzerMenuCssKlasse => zeigeBenutzerMenu ? "zeige-menu" : null;
    private void UmschalteBenutzerMenu()
    {
        zeigeBenutzerMenu = !zeigeBenutzerMenu;
    }
    private async Task AusblendenBenutzerMenu()
    {
        await Task.Delay(200);
        zeigeBenutzerMenu = false;
    }
    private async Task Ausloggen()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        await WarenKorbDienst.GeheZurWarenKorbArtikelAnzahlAsync();
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("");
    }
}
